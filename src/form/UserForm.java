/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package form;

import controller.Controller;
import controller.UserController;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Optional;
import record.UserRecord;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import util.UpdateResult;
import util.input_verifier.BaseInputVerifier;
import util.input_verifier.LengthVerifier;
import util.input_verifier.NotEmptyVerifier;
import util.input_verifier.NotUnselectedVerifier;
import util.input_verifier.VerifiableField;
import util.input_verifier.VerifiableFieldChain;


/**
 *
 * @author Edgar
 */
public class UserForm extends Form<UserRecord> {
    Runnable recordChangeListener = () -> {};

    public UserForm() {
        super();
    }

    public UserForm(Optional<UserRecord> currentRecord) {
        super(currentRecord);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        labeledNameField = new component.LabeledTextField();
        labeledPasswordField = new component.LabeledPasswordField();
        labeledTypeComboBox = new component.LabeledComboBox<>();

        setBackground(util.ProjectColor.WHITE.getColor());
        setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        add(filler1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        add(filler2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        add(filler3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        add(filler4, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        add(filler5, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        add(filler6, gridBagConstraints);

        labeledNameField.setLabelText("Nombre");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(labeledNameField, gridBagConstraints);

        labeledPasswordField.setLabelText("Contraseña");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(labeledPasswordField, gridBagConstraints);

        labeledTypeComboBox.setLabelText("Tipo");
        labeledTypeComboBox.setModel(new DefaultComboBoxModel<record.UserRecord.UserType>((record.UserRecord.UserType[]) record.UserRecord.UserType.getValidUserTypes()));
        labeledTypeComboBox.setSelectedIndex(-1);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(labeledTypeComboBox, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    
    
    @Override
    public void setInterfaceForCurrentRecord(Optional<UserRecord> currentRecord) {
        this.currentRecord = currentRecord;
        labeledNameField.getTextField().setText(currentRecord.map((UserRecord record) -> record.getNombre()).orElse(""));
        labeledPasswordField.getPasswordField().setText(currentRecord.map((UserRecord record) -> record.getContrasenia()).orElse(""));
        labeledTypeComboBox.getComboBox().setSelectedItem(currentRecord.map((UserRecord record) -> record.getTipo()).orElse(null));
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.Box.Filler filler1;
    protected javax.swing.Box.Filler filler2;
    protected javax.swing.Box.Filler filler3;
    protected javax.swing.Box.Filler filler4;
    protected javax.swing.Box.Filler filler5;
    protected javax.swing.Box.Filler filler6;
    protected component.LabeledTextField labeledNameField;
    protected component.LabeledPasswordField labeledPasswordField;
    protected component.LabeledComboBox<record.UserRecord.UserType> labeledTypeComboBox;
    // End of variables declaration//GEN-END:variables

    @Override
    public LinkedList<JTextField> getTextFields() {
        return new LinkedList<>(Arrays.asList(
                labeledNameField.getTextField(), 
                labeledPasswordField.getPasswordField())
        );
    }

    @Override
    public LinkedList<JComboBox> getComboBoxes() {
        return new LinkedList<>(Arrays.asList(labeledTypeComboBox.getComboBox()));
    }

    @Override
    public UserRecord buildRecord() {
        UserRecord record = new UserRecord();
        if (currentRecord.isPresent()) {
            record.setId(currentRecord.get().getId());
        } else {
            record.setId(-1);
        }
        
        record.setNombre(labeledNameField.getTextField().getText());
        record.setContrasenia(labeledPasswordField.getText());
        
        UserRecord.UserType userType;
        int selectedIndex = labeledTypeComboBox.getSelectedIndex();
        
        if (selectedIndex == -1) {
            userType = UserRecord.UserType.NONE;
        } else {
            userType = (UserRecord.UserType) labeledTypeComboBox.getComboBox().getSelectedItem();
        }
        
        record.setTipo(userType);
        
        return record;
    }

    
    @Override
    public boolean isInputDifferentFromRecord() {
        UserRecord record = getCurrentRecord().get();
        if (!record.getNombre().equals(labeledNameField.getTextField().getText())) return true;
        if (!record.getContrasenia().equals(labeledPasswordField.getText())) return true;
        if (record.getTipo() != (UserRecord.UserType) labeledTypeComboBox.getComboBox().getSelectedItem()) return true;
        return false;
    }
    
    
    @Override
    public Integer getRecordId(UserRecord record) {
        return record.getId();
    }

    @Override
    public boolean recordExists(Integer id) throws SQLException, ClassNotFoundException, Exception {
        return Controller.USER_CONTROLLER.exists(id);
    }

    @Override
    public UpdateResult deleteRecord(Integer id) throws SQLException, ClassNotFoundException, Exception {
        return Controller.USER_CONTROLLER.delete(id);
    }

    @Override
    public UpdateResult insertRecord(UserRecord record) throws SQLException, ClassNotFoundException, Exception {
        return Controller.USER_CONTROLLER.insert(record);
    }

    @Override
    public UpdateResult updateRecord(UserRecord record) throws SQLException, ClassNotFoundException, Exception {
        return Controller.USER_CONTROLLER.update(record);
    }

    @Override
    public VerifiableFieldChain getVerifiableFieldChain() {
        return VerifiableFieldChain.of(
                new VerifiableField<JTextField>("nombre", labeledNameField.getTextField())
                        .add(new NotEmptyVerifier())
                        .add(new LengthVerifier(4, 20))
                ,
                new VerifiableField<JTextField>("contraseña", labeledPasswordField.getPasswordField())
                        .add(new NotEmptyVerifier())
                        .add(new LengthVerifier(8, 20))
                ,
                new VerifiableField<JComboBox<UserRecord.UserType>>("tipo", labeledTypeComboBox.getComboBox())
                    .add(new NotUnselectedVerifier())
        );
    }

    @Override
    protected void initializeComponents() {
        initComponents();
    }
}
