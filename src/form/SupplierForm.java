/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package form;

import controller.Controller;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Optional;
import javax.swing.JComboBox;
import javax.swing.JTextField;
import record.SupplierRecord;
import util.UpdateResult;
import util.input_verifier.LengthVerifier;
import util.input_verifier.NotEmptyVerifier;
import util.input_verifier.VerifiableField;
import util.input_verifier.VerifiableFieldChain;

/**
 *
 * @author Edgar
 */
public class SupplierForm extends Form<SupplierRecord> {
    public SupplierForm() {
        super();
    }

    public SupplierForm(Optional<SupplierRecord> currentRecord) {
        super(currentRecord);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        filler7 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        filler8 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        filler9 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        fullNameTextField = new component.LabeledTextField();
        addressTextField = new component.LabeledTextField();
        phoneNumberTextField = new component.LabeledTextField();
        cellphoneTextField = new component.LabeledTextField();
        rfcTextField = new component.LabeledTextField();

        setBackground(util.ProjectColor.WHITE.getColor());
        setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        add(filler1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        add(filler2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        add(filler3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        add(filler4, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        add(filler5, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        add(filler6, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        add(filler7, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        add(filler8, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        add(filler9, gridBagConstraints);

        fullNameTextField.setLabelText("Nombre completo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(fullNameTextField, gridBagConstraints);

        addressTextField.setLabelText("Dirección");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(addressTextField, gridBagConstraints);

        phoneNumberTextField.setLabelText("Teléfono");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(phoneNumberTextField, gridBagConstraints);

        cellphoneTextField.setLabelText("Celular");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(cellphoneTextField, gridBagConstraints);

        rfcTextField.setLabelText("RFC");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(rfcTextField, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void setInterfaceForCurrentRecord(Optional<SupplierRecord> optional) {
        this.currentRecord = optional;
        optional.ifPresentOrElse((SupplierRecord record) -> {
            fullNameTextField.getTextField().setText(record.getNombre());
            addressTextField.getTextField().setText(record.getDireccion());
            phoneNumberTextField.getTextField().setText(record.getTelefono());
            cellphoneTextField.getTextField().setText(record.getCelular());
            rfcTextField.getTextField().setText(record.getRfc());
        }, () -> {
            fullNameTextField.getTextField().setText("");
            addressTextField.getTextField().setText("");
            phoneNumberTextField.getTextField().setText("");
            cellphoneTextField.getTextField().setText("");
            rfcTextField.getTextField().setText("");
        });
    }

    @Override
    public LinkedList<JTextField> getTextFields() {
        return new LinkedList<JTextField>(Arrays.asList(
                fullNameTextField.getTextField(),
                rfcTextField.getTextField(),
                addressTextField.getTextField(),
                phoneNumberTextField.getTextField(),
                cellphoneTextField.getTextField()
        ));
    }

    @Override
    public LinkedList<JComboBox> getComboBoxes() {
        return new LinkedList<>();
    }

    @Override
    public SupplierRecord buildRecord() {
        SupplierRecord record = new SupplierRecord();
        
        record.setNombre(fullNameTextField.getTextField().getText());
        record.setRfc(fullNameTextField.getTextField().getText());
        record.setDireccion(addressTextField.getTextField().getText());
        record.setTelefono(phoneNumberTextField.getTextField().getText());
        record.setCelular(cellphoneTextField.getTextField().getText());
        
        return record;
    }

    @Override
    public boolean isInputDifferentFromRecord() {
        SupplierRecord record = currentRecord.get();
        
        if (!record.getNombre().equals(fullNameTextField.getTextField().getText())) return true;
        if (!record.getRfc().equals(rfcTextField.getTextField().getText())) return true;
        if (!record.getDireccion().equals(addressTextField.getTextField().getText())) return true;
        if (!record.getTelefono().equals(phoneNumberTextField.getTextField().getText())) return true;
        if (!record.getCelular().equals(cellphoneTextField.getTextField().getText())) return true;
        
        return false;
    }

    @Override
    public VerifiableFieldChain getVerifiableFieldChain() {
        return VerifiableFieldChain.of(
            new VerifiableField<JTextField>("nombre", fullNameTextField.getTextField())
                    .add(new NotEmptyVerifier())
            ,
            new VerifiableField<JTextField>("rfc", rfcTextField.getTextField())
                    .add(new NotEmptyVerifier())
            ,
            new VerifiableField<JTextField>("dirección", addressTextField.getTextField())
                    .add(new NotEmptyVerifier())
            ,
            new VerifiableField<JTextField>("teléfono", phoneNumberTextField.getTextField())
                    .add(new NotEmptyVerifier())
            ,
            new VerifiableField<JTextField>("celular", cellphoneTextField.getTextField())
                    .add(new NotEmptyVerifier())
        );
    }

    @Override
    public Integer getRecordId(SupplierRecord record) {
        return record.getId();
    }

    @Override
    public boolean recordExists(Integer id) throws SQLException, ClassNotFoundException, Exception {
        return Controller.SUPPLIER_CONTROLLER.exists(id);
    }

    @Override
    public UpdateResult deleteRecord(Integer id) throws SQLException, ClassNotFoundException, Exception {
        return Controller.SUPPLIER_CONTROLLER.delete(id);
    }

    @Override
    public UpdateResult insertRecord(SupplierRecord record) throws SQLException, ClassNotFoundException, Exception {
        return Controller.SUPPLIER_CONTROLLER.insert(record);
    }

    @Override
    public UpdateResult updateRecord(SupplierRecord record) throws SQLException, ClassNotFoundException, Exception {
        return Controller.SUPPLIER_CONTROLLER.update(record);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private component.LabeledTextField addressTextField;
    private component.LabeledTextField cellphoneTextField;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.Box.Filler filler6;
    private javax.swing.Box.Filler filler7;
    private javax.swing.Box.Filler filler8;
    private javax.swing.Box.Filler filler9;
    private component.LabeledTextField fullNameTextField;
    private component.LabeledTextField phoneNumberTextField;
    private component.LabeledTextField rfcTextField;
    // End of variables declaration//GEN-END:variables

    @Override
    protected void initializeComponents() {
        initComponents();
    }
}
