/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package form;

import card.ClientCard;
import component.LabeledTextField;
import controller.Controller;
import java.sql.SQLException;
import java.util.LinkedList;
import java.util.Optional;
import javax.swing.JComboBox;
import javax.swing.JTextField;
import record.ClientRecord;
import util.UpdateResult;
import util.input_verifier.ContainsDigitsOnlyVerifier;
import util.input_verifier.ExactLengthVerifier;
import util.input_verifier.MaxLengthVerifier;
import util.input_verifier.NotEmptyVerifier;
import util.input_verifier.VerifiableField;
import util.input_verifier.VerifiableFieldChain;

/**
 *
 * @author Edgar
 */
public class ClientForm extends Form<ClientRecord> {
    public ClientForm() throws SQLException, ClassNotFoundException, Exception {
    }

    public ClientForm(Optional<ClientRecord> currentRecord) throws SQLException, ClassNotFoundException, Exception {
        super(currentRecord);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        filler7 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        filler8 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        filler9 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        nameTextField = new component.LabeledTextField();
        rfcTextField = new component.LabeledTextField();
        streetTextField = new component.LabeledTextField();
        houseNumberTextField = new component.LabeledTextField();
        neighborhoodTextField = new component.LabeledTextField();
        countyTextField = new component.LabeledTextField();
        stateTextField = new component.LabeledTextField();
        telephoneNumberTextField = new component.LabeledTextField();
        cellphoneTextField = new component.LabeledTextField();

        setBackground(util.ProjectColor.WHITE.getColor());
        setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        add(filler1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        add(filler2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        add(filler3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        add(filler4, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        add(filler5, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        add(filler6, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        add(filler7, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        add(filler8, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        add(filler9, gridBagConstraints);

        nameTextField.setLabelText("Nombre");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(nameTextField, gridBagConstraints);

        rfcTextField.setLabelText("RFC");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(rfcTextField, gridBagConstraints);

        streetTextField.setLabelText("Calle");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(streetTextField, gridBagConstraints);

        houseNumberTextField.setLabelText("Número de casa");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(houseNumberTextField, gridBagConstraints);

        neighborhoodTextField.setLabelText("Colonia");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(neighborhoodTextField, gridBagConstraints);

        countyTextField.setLabelText("Municipio");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(countyTextField, gridBagConstraints);

        stateTextField.setLabelText("Estado");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(stateTextField, gridBagConstraints);

        telephoneNumberTextField.setLabelText("Teléfono");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(telephoneNumberTextField, gridBagConstraints);

        cellphoneTextField.setLabelText("Celular");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(cellphoneTextField, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    @Override
    protected void initializeComponents() throws SQLException, ClassNotFoundException, Exception {
        initComponents();
    }

    @Override
    public void setInterfaceForCurrentRecord(Optional<ClientRecord> currentRecord) {
        nameTextField.getTextField().setText(currentRecord.map((ClientRecord record) -> record.getNombre()).orElse(""));
        rfcTextField.getTextField().setText(currentRecord.map((ClientRecord record) -> record.getRfc()).orElse(""));
        streetTextField.getTextField().setText(currentRecord.map((ClientRecord record) -> record.getCalle()).orElse(""));
        houseNumberTextField.getTextField().setText(currentRecord.map((ClientRecord record) -> record.getNumero_de_casa()).orElse(""));
        neighborhoodTextField.getTextField().setText(currentRecord.map((ClientRecord record) -> record.getColonia()).orElse(""));
        countyTextField.getTextField().setText(currentRecord.map((ClientRecord record) -> record.getMunicipio()).orElse(""));
        stateTextField.getTextField().setText(currentRecord.map((ClientRecord record) -> record.getEstado()).orElse(""));
        telephoneNumberTextField.getTextField().setText(currentRecord.map((ClientRecord record) -> record.getTelefono()).orElse(""));
        cellphoneTextField.getTextField().setText(currentRecord.map((ClientRecord record) -> record.getCelular()).orElse(""));
    }

    @Override
    public LinkedList<JTextField> getTextFields() {
        return new LinkedList<>(new LinkedList<>(java.util.Arrays.asList(
                nameTextField,
                rfcTextField,
                streetTextField,
                houseNumberTextField,
                neighborhoodTextField,
                countyTextField,
                stateTextField,
                telephoneNumberTextField,
                cellphoneTextField
        )).stream().map((LabeledTextField field) -> field.getTextField()).toList());
    }

    @Override
    public LinkedList<JComboBox> getComboBoxes() {
        return new LinkedList<>();
    }

    @Override
    public ClientRecord buildRecord() {
        ClientRecord record = new ClientRecord();
        
        record.setId(currentRecord.map((ClientRecord __) -> __.getId()).orElse(-1));
        record.setNombre(nameTextField.getTextField().getText());
        record.setRfc(rfcTextField.getTextField().getText());
        record.setCalle(streetTextField.getTextField().getText());
        record.setNumero_de_casa(houseNumberTextField.getTextField().getText());
        record.setColonia(neighborhoodTextField.getTextField().getText());
        record.setMunicipio(countyTextField.getTextField().getText());
        record.setEstado(stateTextField.getTextField().getText());
        record.setTelefono(telephoneNumberTextField.getTextField().getText());
        record.setCelular(cellphoneTextField.getTextField().getText());
        
        return record;
    }

    @Override
    public boolean isInputDifferentFromRecord() {
        ClientRecord record = currentRecord.get();
        
        if (!nameTextField.getTextField().getText().equals(record.getNombre())) return true;
        if (!rfcTextField.getTextField().getText().equals(record.getRfc())) return true;
        if (!streetTextField.getTextField().getText().equals(record.getCalle())) return true;
        if (!houseNumberTextField.getTextField().getText().equals(record.getNumero_de_casa())) return true;
        if (!neighborhoodTextField.getTextField().getText().equals(record.getColonia())) return true;
        if (!countyTextField.getTextField().getText().equals(record.getMunicipio())) return true;
        if (!stateTextField.getTextField().getText().equals(record.getEstado())) return true;
        if (!telephoneNumberTextField.getTextField().getText().equals(record.getTelefono())) return true;
        if (!cellphoneTextField.getTextField().getText().equals(record.getCelular())) return true;
        
        return false;
    }

    @Override
    public VerifiableFieldChain getVerifiableFieldChain() {
        return VerifiableFieldChain.of(
                new VerifiableField<JTextField>("nombre", nameTextField.getTextField())
                    .add(new NotEmptyVerifier())
                    .add(new MaxLengthVerifier(40))
                ,
                new VerifiableField<JTextField>("rfc", rfcTextField.getTextField())
                    .add(new NotEmptyVerifier())
                    .add(new MaxLengthVerifier(20))
                ,
                new VerifiableField<JTextField>("calle", streetTextField.getTextField())
                    .add(new NotEmptyVerifier())
                    .add(new MaxLengthVerifier(20))
                ,
                new VerifiableField<JTextField>("número de casa", houseNumberTextField.getTextField())
                    .add(new NotEmptyVerifier())
                    .add(new MaxLengthVerifier(20))
                ,
                new VerifiableField<JTextField>("colonia", neighborhoodTextField.getTextField())
                    .add(new NotEmptyVerifier())
                    .add(new MaxLengthVerifier(20))
                ,
                new VerifiableField<JTextField>("municipio", countyTextField.getTextField())
                    .add(new NotEmptyVerifier())
                    .add(new MaxLengthVerifier(40))
                ,
                new VerifiableField<JTextField>("estado", stateTextField.getTextField())
                    .add(new NotEmptyVerifier())
                    .add(new MaxLengthVerifier(20))
                ,
                new VerifiableField<JTextField>("teléfono", telephoneNumberTextField.getTextField())
                    .add(new NotEmptyVerifier())
                    .add(new ExactLengthVerifier(10))
                    .add(new ContainsDigitsOnlyVerifier())
                ,
                new VerifiableField<JTextField>("celular", cellphoneTextField.getTextField())
                    .add(new NotEmptyVerifier())
                    .add(new ExactLengthVerifier(10))
                    .add(new ContainsDigitsOnlyVerifier())
        );
    }

    @Override
    public Integer getRecordId(ClientRecord record) {
        return record.getId();
    }

    @Override
    public boolean recordExists(Integer id) throws SQLException, ClassNotFoundException, Exception {
        return Controller.CLIENT_CONTROLLER.exists(id);
    }

    @Override
    public UpdateResult deleteRecord(Integer id) throws SQLException, ClassNotFoundException, Exception {
        return Controller.CLIENT_CONTROLLER.delete(id);
    }

    @Override
    public UpdateResult insertRecord(ClientRecord record) throws SQLException, ClassNotFoundException, Exception {
        return Controller.CLIENT_CONTROLLER.insert(record);
    }

    @Override
    public UpdateResult updateRecord(ClientRecord record) throws SQLException, ClassNotFoundException, Exception {
        return Controller.CLIENT_CONTROLLER.update(record);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private component.LabeledTextField cellphoneTextField;
    private component.LabeledTextField countyTextField;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.Box.Filler filler6;
    private javax.swing.Box.Filler filler7;
    private javax.swing.Box.Filler filler8;
    private javax.swing.Box.Filler filler9;
    private component.LabeledTextField houseNumberTextField;
    private component.LabeledTextField nameTextField;
    private component.LabeledTextField neighborhoodTextField;
    private component.LabeledTextField rfcTextField;
    private component.LabeledTextField stateTextField;
    private component.LabeledTextField streetTextField;
    private component.LabeledTextField telephoneNumberTextField;
    // End of variables declaration//GEN-END:variables
}
