/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package frames;

import controllers.ClientController;
import java.awt.event.ContainerEvent;
import java.awt.event.ContainerListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import records.ClientRecord;
import java.sql.SQLException;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import utils.UpdateResult;

/**
 *
 * @author Edgar
 */
public class AddClientForm extends javax.swing.JFrame {
    private Optional<ClientRecord> clientRecord;
    
    public AddClientForm() {
        this(Optional.of(1));
    }
    
    /**
     * Creates new form AddClientForm
     * @param clientId The original client data to initialize this component
     */
    public AddClientForm(Optional<Integer> clientId) {
        initComponents();
        
        this.clientRecord = Optional.empty();
        
        goBackLabel.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                MenuFrame menu = new MenuFrame();
                menu.setVisible(true);
                AddClientForm.this.setVisible(false);
            }
        });
        
        try {
            this.clientRecord = ClientController.getClientById(clientId.get());
            if (clientRecord.isEmpty()) {
                JOptionPane.showMessageDialog(this, "El cliente especificado no existe", "Cliente inexistente", JOptionPane.ERROR_MESSAGE);
                this.dispose();
            } else {
                headerLabel.setText("Cliente #" + clientRecord.get().getId());
            }
        } catch (Exception ex) {
            Logger.getLogger(AddClientForm.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("pantallas.AddClientForm.<init>()");
            JOptionPane.showMessageDialog(this, "No se pudo obtener la información del usuario indicado", "Error de base de datos", JOptionPane.ERROR_MESSAGE);
            this.dispose();
        }
        
        setInitialState();
    }
    
    protected void setInitialState() {
        if (clientRecord.isEmpty()) {
            deleteButton.setEnabled(false);
            resetButtonLabel.setText("Limpiar");
            resetButton.setToolTipText("Limpiar campos");
            headerLabel.setText("Nuevo cliente");
        } else {
            saveButtonLabel.setText("Sincronizar");
            saveButton.setToolTipText("Sincronizar datos");
        }
        
        if (clientRecord.isEmpty()) {
            nameTextField.setText("");
            rfcTextField.setText("");
            streetTextField.setText("");
            houseNumberTextField.setText("");
            neighborhoodTextField.setText("");
            countyTextField.setText("");
            stateComboBox.setSelectedItem("");
            phoneNumberTextField.setText("");
            cellphoneNumberTextField.setText("");
        } else {
            ClientRecord record = clientRecord.get();
            nameTextField.setText(record.getNombre());
            rfcTextField.setText(record.getRfc());
            streetTextField.setText(record.getCalle());
            houseNumberTextField.setText(record.getNumero_de_casa());
            neighborhoodTextField.setText(record.getColonia());
            countyTextField.setText(record.getMunicipio());
            stateComboBox.setSelectedItem(record.getEstado());
            phoneNumberTextField.setText(record.getTelefono());
            cellphoneNumberTextField.setText(record.getCelular());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        headerLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        goBackLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        rfcTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        cellphoneNumberTextField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        phoneNumberTextField = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        saveButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        saveButtonLabel = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        resetButtonLabel = new javax.swing.JLabel();
        countyTextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        streetTextField = new javax.swing.JTextField();
        houseNumberTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        neighborhoodTextField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        stateComboBox = new javax.swing.JComboBox<>();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(45, 0), new java.awt.Dimension(45, 0), new java.awt.Dimension(45, 32767));
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().setLayout(null);

        headerLabel.setFont(new java.awt.Font("Inter 24pt ExtraBold", 1, 36)); // NOI18N
        headerLabel.setForeground(new java.awt.Color(15, 23, 42));
        headerLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/64-client.png"))); // NOI18N
        headerLabel.setText(" Nuevo Cliente");
        headerLabel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        getContentPane().add(headerLabel);
        headerLabel.setBounds(30, 20, 340, 70);

        jPanel1.setBackground(new java.awt.Color(249, 115, 22));

        goBackLabel.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        goBackLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icon-back-16.png"))); // NOI18N
        goBackLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(goBackLabel)
                .addContainerGap(385, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(goBackLabel)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 400, 50);

        jLabel3.setText("Nombre Completo");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(40, 100, 120, 16);

        nameTextField.setName("Nombre completo"); // NOI18N
        getContentPane().add(nameTextField);
        nameTextField.setBounds(50, 120, 130, 22);
        getContentPane().add(rfcTextField);
        rfcTextField.setBounds(200, 120, 100, 22);

        jLabel4.setText("RFC");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(200, 100, 100, 16);

        jLabel10.setText("Dirección");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(300, 80, 100, 16);
        getContentPane().add(cellphoneNumberTextField);
        cellphoneNumberTextField.setBounds(210, 410, 154, 22);

        jLabel12.setText("Celular");
        getContentPane().add(jLabel12);
        jLabel12.setBounds(210, 390, 154, 16);

        jLabel11.setText("Teléfono");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(60, 360, 154, 16);
        getContentPane().add(phoneNumberTextField);
        phoneNumberTextField.setBounds(40, 410, 160, 22);

        jPanel3.setLayout(new java.awt.GridLayout(1, 0, 20, 0));

        saveButton.setBackground(new java.awt.Color(204, 204, 255));
        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icon-save-32.png"))); // NOI18N
        saveButton.setToolTipText("Guardar");
        saveButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        jPanel3.add(saveButton);

        deleteButton.setBackground(new java.awt.Color(255, 204, 204));
        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icon-delete-32.png"))); // NOI18N
        deleteButton.setToolTipText("Eliminar");
        deleteButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        jPanel3.add(deleteButton);

        resetButton.setBackground(new java.awt.Color(204, 255, 204));
        resetButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icon-undo-32.png"))); // NOI18N
        resetButton.setToolTipText("Restablecer");
        resetButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });
        jPanel3.add(resetButton);

        getContentPane().add(jPanel3);
        jPanel3.setBounds(80, 470, 240, 40);

        jPanel4.setLayout(new java.awt.GridLayout(1, 0, 20, 0));

        saveButtonLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        saveButtonLabel.setText("Guardar");
        saveButtonLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel4.add(saveButtonLabel);

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Eliminar");
        jLabel14.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel4.add(jLabel14);

        resetButtonLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        resetButtonLabel.setText("Restablecer");
        resetButtonLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel4.add(resetButtonLabel);

        getContentPane().add(jPanel4);
        jPanel4.setBounds(80, 450, 240, 20);

        countyTextField.setPreferredSize(new java.awt.Dimension(64, 30));
        getContentPane().add(countyTextField);
        countyTextField.setBounds(40, 250, 160, 30);

        jLabel8.setFont(new java.awt.Font("Open Sans Light", 0, 12)); // NOI18N
        jLabel8.setText("Municipio");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(40, 230, 154, 17);

        jLabel5.setText("Calle");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(60, 140, 124, 16);
        getContentPane().add(streetTextField);
        streetTextField.setBounds(60, 160, 124, 22);
        getContentPane().add(houseNumberTextField);
        houseNumberTextField.setBounds(190, 160, 30, 22);

        jLabel6.setText("Núm.");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(190, 140, 30, 16);

        jLabel7.setText("Colonia");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(220, 140, 154, 16);
        getContentPane().add(neighborhoodTextField);
        neighborhoodTextField.setBounds(220, 160, 154, 22);

        jLabel9.setFont(new java.awt.Font("Open Sans Light", 0, 12)); // NOI18N
        jLabel9.setText("Estado");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(220, 230, 154, 16);

        stateComboBox.setFont(new java.awt.Font("Open Sans Medium", 0, 15)); // NOI18N
        stateComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Aguascalientes", "Baja California", "Baja California Sur", "Colima", "Durango", "Guerrero", "Hidalgo", "Jalisco", "Morelos", "Nayarit", "Oaxaca", "Puebla", "Quintana Roo", "Querétaro", "San Luis Potosí", "Tamaulipas", "Veracruz", "Zacatecas" }));
        stateComboBox.setPreferredSize(new java.awt.Dimension(130, 30));
        getContentPane().add(stateComboBox);
        stateComboBox.setBounds(220, 250, 154, 30);
        getContentPane().add(filler1);
        filler1.setBounds(0, 0, 45, 530);

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel2);
        jPanel2.setBounds(0, 160, 400, 50);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private ClientRecord buildCurrentRecord() {
        return new ClientRecord(
            clientRecord.map((record) -> record.getId()).orElse(-1), 
            nameTextField.getText(), 
            rfcTextField.getText(), 
            streetTextField.getText(), 
            houseNumberTextField.getText(), 
            neighborhoodTextField.getText(), 
            countyTextField.getText(), 
            (String) stateComboBox.getSelectedItem(),
            phoneNumberTextField.getText(), 
            cellphoneNumberTextField.getText()
        );
    }
    
    /**
     * TODO
     */
    private void validateInputs() {
        JComponent[] inputs = new JComponent[] {
            nameTextField,
            rfcTextField,
            streetTextField,
            houseNumberTextField,
            neighborhoodTextField,
            countyTextField,
            stateComboBox,
            phoneNumberTextField,
            cellphoneNumberTextField
        };
        nameTextField.setInputVerifier(new InputVerifier() {
            @Override
            public boolean verify(JComponent input) {
                throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
            }
        
        });
        
        // should return a formatted error and an input in case there is one input 
        // whose value is not valid
    }
    
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        if (clientRecord.isEmpty()) {
            // add a user
            ClientRecord record = buildCurrentRecord();
            validateInputs();
            try {
                UpdateResult result = ClientController.insertClient(record);
                if (result == UpdateResult.SUCCESS) {
                    JOptionPane.showMessageDialog(
                            this, 
                            "El usuario fue registrado exitosamente", 
                            "Usuario registrado", 
                            JOptionPane.INFORMATION_MESSAGE
                    );
                    clientRecord = Optional.empty();
                    setInitialState();
                } else {
                    JOptionPane.showMessageDialog(
                            this, 
                            "No se pudo insertar al usuario", 
                            "Usuario no registrado", 
                            JOptionPane.ERROR_MESSAGE
                    );
                }
            } catch (Exception exception) {
                JOptionPane.showMessageDialog(
                        this, 
                        "La base de datos tuvo un error al intentar registrar al cliente", 
                        "Error de base de datos", 
                        JOptionPane.ERROR_MESSAGE
                );
                Logger.getLogger(AddClientForm.class.getName()).log(Level.SEVERE, null, exception);
            }
        } else {
            // update the user
            validateInputs();
            try {
                UpdateResult result = ClientController.updateClientById(buildCurrentRecord());
                if (result == UpdateResult.SUCCESS) {
                    JOptionPane.showMessageDialog(
                            this, 
                            "Los datos del usuario se sincronizaron exitosamente", 
                            "Sincronización exitosa", 
                            JOptionPane.INFORMATION_MESSAGE
                    );
                    clientRecord = Optional.of(buildCurrentRecord());
                    // Not sure if I need to call this
                    // setInitialState();
                } else {
                    JOptionPane.showMessageDialog(
                            this, 
                            "Los datos del usuario no se sincronizaron", 
                            "Sincronización errónea", 
                            JOptionPane.ERROR_MESSAGE
                    );
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(
                        this, 
                        "La base de datos tuvo un error al intentar sincronizar los datos del cliente", 
                        "Error de base de datos", 
                        JOptionPane.ERROR_MESSAGE
                );
            }
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        setInitialState();
        nameTextField.requestFocus();
    }//GEN-LAST:event_resetButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        if (clientRecord.isPresent()) {
            ClientRecord record = clientRecord.get();
            try {
                UpdateResult result = ClientController.deleteClientById(record.getId());
                if (result == UpdateResult.SUCCESS) {
                    JOptionPane.showMessageDialog(
                            this, 
                            "El usuario fue eliminado correctamente", 
                            "Usuario eliminado", 
                            JOptionPane.INFORMATION_MESSAGE
                    );
                    this.clientRecord = Optional.empty();
                    setInitialState();
                } else if (result == UpdateResult.FAILURE) {
                    JOptionPane.showMessageDialog(
                            this, 
                            "El usuario no pudo ser eliminado de la base de datos; inténtalo de nuevo", 
                            "Usuario no eliminado", 
                            JOptionPane.INFORMATION_MESSAGE
                    );
                }
            } catch (SQLException ex) {
                Logger.getLogger(AddClientForm.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(
                        this, 
                        "Hubo un error con la base de datos y el usuario no pudo ser eliminado", 
                        "Error de base de datos", 
                        JOptionPane.ERROR_MESSAGE
                );
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(
                        this, 
                        "Hubo un error interno del programa y el usuario no pudo ser eliminado", 
                        "Error interno", 
                        JOptionPane.ERROR_MESSAGE
                );
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddClientForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddClientForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddClientForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddClientForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddClientForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField cellphoneNumberTextField;
    private javax.swing.JTextField countyTextField;
    private javax.swing.JButton deleteButton;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JLabel goBackLabel;
    private javax.swing.JLabel headerLabel;
    private javax.swing.JTextField houseNumberTextField;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JTextField neighborhoodTextField;
    private javax.swing.JTextField phoneNumberTextField;
    private javax.swing.JButton resetButton;
    private javax.swing.JLabel resetButtonLabel;
    private javax.swing.JTextField rfcTextField;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel saveButtonLabel;
    private javax.swing.JComboBox<String> stateComboBox;
    private javax.swing.JTextField streetTextField;
    // End of variables declaration//GEN-END:variables

}
